{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","MemeGenerator","componentDidMount","fetch","then","response","json","memes","data","setState","memeData","handleChange","event","target","name","value","topTextImg","bottomTextImg","handleSubmit","preventDefault","randomNum","Math","floor","random","state","length","genNewRandImg","url","randomImg","topText","bottomText","onSubmit","this","id","type","placeholder","onChange","aria-label","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6LAeeA,MAbf,WACE,OACE,8BACE,4BAAQC,UAAU,gBAChB,yBAAKC,IAAI,iEAAiEC,IAAI,0BAC9E,gD,mCC0FOC,E,kDA7Fb,aAAc,IAAD,8BACX,gBAYFC,kBAAoB,WAClBC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACNE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACbC,SAAUH,QAnBN,EAwBbI,aAAe,SAACC,GAAW,IAAD,EACFA,EAAMC,OAArBC,EADiB,EACjBA,KAAMC,EADW,EACXA,MACb,EAAKN,SAAL,eACGK,EAAOC,IAEE,YAATD,GACD,EAAKL,SAAS,CACZO,WAAWD,IAGF,eAATD,GACF,EAAKL,SAAS,CACZQ,cAAeF,KApCR,EA0CbG,aAAe,SAACN,GACdA,EAAMO,iBAIN,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMd,SAASe,QAC3DC,EAAgB,EAAKF,MAAMd,SAASU,GAAWO,IACrD,EAAKlB,SAAS,CACZmB,UAAWF,EACXG,QAAQ,GACRC,WAAW,MAlDb,EAAKN,MAAO,CAEVK,QAAS,GACTb,WAAY,GACZc,WAAY,GACZb,cAAe,GACfW,UAAW,iCACXlB,SAAU,IATD,E,qDA0DX,OACE,6BACI,0BAAMZ,UAAU,WAAWiC,SAAUC,KAAKd,cACxC,2BACEe,GAAG,UACHC,KAAK,OACLC,YAAY,WACZrB,KAAK,UACLC,MAAOiB,KAAKR,MAAMK,QAClBO,SAAUJ,KAAKrB,aACf0B,aAAW,aAEb,2BACEH,KAAK,OACLC,YAAY,cACZrB,KAAK,aACLC,MAAOiB,KAAKR,MAAMM,WAClBM,SAAUJ,KAAKrB,aACf0B,aAAW,gBAEb,wCAGF,yBAAKvC,UAAU,QACb,yBAAKC,IAAKiC,KAAKR,MAAMI,UAAW5B,IAAI,SAEnCgC,KAAKR,MAAMR,WAAa,wBAAIlB,UAAU,WAAWkC,KAAKR,MAAMR,YAAkB,KAC9EgB,KAAKR,MAAMP,cAAgB,wBAAInB,UAAU,cAAckC,KAAKR,MAAMP,eAAsB,W,GAtFzEqB,IAAMC,WCUnBC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.943df483.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n  return(\n    <body>\n      <header className=\"header-style\">\n        <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"randomly choosen meme\" />\n        <p>\n          Meme Generator \n        </p>\n      </header>\n    </body>\n  )\n}\n\nexport default Header","import React from 'react'\n\n\nclass MemeGenerator extends React.Component {\n  constructor(){\n    super()\n    this.state ={\n      \n      topText: \"\",\n      topTextImg: \"\",\n      bottomText: \"\",\n      bottomTextImg: \"\",\n      randomImg: \"https://i.imgflip.com/1bij.jpg\",\n      memeData: []\n    }\n  }\n\n  componentDidMount = () => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then(response => response.json())\n    .then(response => {\n          const {memes} = response.data\n          this.setState({\n           memeData: memes\n    })})\n  \n  }\n\n  handleChange = (event) => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n    if(name === \"topText\"){\n      this.setState({\n        topTextImg:value\n      })\n    }\n    if (name === \"bottomText\") {\n      this.setState({\n        bottomTextImg: value\n      })\n    }\n  }\n  \n \n  handleSubmit = (event) => {\n    event.preventDefault()\n    \n    // console.log('clicked')\n    //Math.ceil (ceiling) is not used when generated random number based on array length because it has a bias.    \n    const randomNum = Math.floor(Math.random() * this.state.memeData.length)\n    const genNewRandImg = this.state.memeData[randomNum].url\n    this.setState({\n      randomImg: genNewRandImg,\n      topText:\"\",\n      bottomText:\"\"\n    })\n    \n  }\n\n  render(){\n    return(\n      <div>\n          <form className=\"memeForm\" onSubmit={this.handleSubmit} >\n            <input\n              id=\"topText\"\n              type=\"text\"\n              placeholder=\"Top text\"\n              name=\"topText\"\n              value={this.state.topText}\n              onChange={this.handleChange}\n              aria-label=\"Top text\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Bottom text\"\n              name=\"bottomText\"\n              value={this.state.bottomText}\n              onChange={this.handleChange}\n              aria-label=\"bottom Text\"\n            />\n            <button>Go!</button>\n          </form>\n\n          <div className=\"meme\">\n            <img src={this.state.randomImg} alt=\"meme\" />\n            {/* Only render headings if there is text in it to ensure accessibility */}\n            {this.state.topTextImg ? <h2 className=\"topText\">{this.state.topTextImg}</h2>: null } \n            {this.state.bottomTextImg ? <h2 className=\"bottomText\">{this.state.bottomTextImg}</h2> : null }\n          </div>\n      </div>\n    )\n  }\n\n}\n\nexport default MemeGenerator","import React from 'react'\nimport Header from './Header.js'\nimport MemeGenerator from './MemeGenerator.js'\n\nfunction App() {\n  return(\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}